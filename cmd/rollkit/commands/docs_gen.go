package commands

import (
	"bufio"
	"os"
	"path/filepath"
	"regexp"
	"strings"

	"github.com/spf13/cobra"
	"github.com/spf13/cobra/doc"
)

var docsDirectory = "./cmd/rollkit/docs"

// DocsGenCmd is the command to generate documentation for rollkit CLI
var DocsGenCmd = &cobra.Command{
	Use:   "docs-gen",
	Short: "Generate documentation for rollkit CLI",
	RunE: func(cmd *cobra.Command, args []string) error {
		// Clear out the docs directory
		err := os.RemoveAll(docsDirectory)
		if err != nil {
			return err
		}
		// Initiate the docs directory
		err = os.MkdirAll(docsDirectory, os.ModePerm)
		if err != nil {
			return err
		}
		err = doc.GenMarkdownTree(RootCmd, docsDirectory)
		if err != nil {
			return err
		}
		return docCleanUp()
	},
}

// docCleanUp is a helper function to clean up the generated documentation by
// replacing the absolute path with $HOME/.rollkit and removing the auto
// generated comment about the generation date.
func docCleanUp() error {
	// Regular expression pattern for matching variations of the search string
	searchPattern := `(\"\/(?:Users\/\w+|home\/\w+|[^\/]+)\/\.rollkit\")`

	// Replacement string
	replaceString := `"HOME/.rollkit"`

	// Regular expression pattern to match lines containing the specified string
	deletePattern := `.*###### Auto generated by spf13/cobra.*`

	// Compile regular expression pattern
	searchRegex, err := regexp.Compile(searchPattern)
	if err != nil {
		return err
	}
	deleteRegex, err := regexp.Compile(deletePattern)
	if err != nil {
		return err
	}

	// Traverse directory
	return filepath.Walk(docsDirectory, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if info.IsDir() {
			return nil
		}

		// Read file
		file, err := os.Open(path)
		if err != nil {
			return err
		}
		defer file.Close()

		scanner := bufio.NewScanner(file)
		var lines []string
		for scanner.Scan() {
			line := scanner.Text()
			// Check if line contains the specified string, and skip if found
			if deleteRegex.MatchString(line) {
				continue
			}
			// Perform search and replace using regular expression
			line = searchRegex.ReplaceAllString(line, replaceString)
			lines = append(lines, line)
		}

		// Write modified content back to file
		err = os.WriteFile(path, []byte(strings.Join(lines, "\n")), 0644)
		if err != nil {
			return err
		}

		return nil
	})
}
